# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Category {
    id: String!
    slug: String!
    title: String!
}

type Comment {
    content: String
    createdAt: DateTime
    id: String!
    itemId: String!
    parent: String!
    parentId: String
    user: User
    userId: String
}

type IdeaUser {
    avatarUri: String
    description: String
    id: String!
    name: String
    thumbnail: String
    url: String
}

type Item {
    category: Category
    categoryId: String
    content: String
    contentJson: JSONObject
    createdAt: DateTime
    description: String
    id: String!
    ideaUser: IdeaUser
    ideaUserId: String
    imageUri: String
    images: String
    imagesUri: JSONObject
    itemType: String
    keywords: String!
    metadata: [ItemMetadata]
    platform: Platform
    platformId: String
    thumbnail: String
    title: String!
    token: Token
    tokenId: String
    totalComment: Int
    totalVote: Int
    updatedAt: DateTime
    video: String
    websiteUri: String
}

type ItemMetadata {
    item: Item
    itemId: String!
    name: String!
    value: String
    valueNumber: Float
}

type ItemType {
    description: String
    ideaCount: Int
    itemType: String
    title: String
}

type Mutation {
    createComment(content: String!, itemId: String!, parentId: String, walletAddress: String!): Comment
    submitIdeaKeyword(id: String!, keywords: String!): Item
    submitItem(description: String!, platformId: String!, title: String!, tokenId: String!, websiteUri: String!): Item
    submitNews(newsData: JSONObject): News
    submitTweet(tweetData: JSONObject!, userData: JSONObject!): Tweet
    submitTweetKeyword(id: String!, keywords: String!): Tweet
    toggleVote(itemId: String!, walletAddress: String!): ToggleVote
    updateItem(id: String!, itemType: String): Item
}

type News {
    content: String!
    createdAt: DateTime
    description: String
    id: String!
    isApproved: Boolean
    isEditorPick: Boolean
    keywords: String
    source: String
    thumbnail: String
    thumbnailUri: String
    title: String!
    updatedAt: DateTime
    websiteUri: String
}

type Platform {
    description: String
    id: String!
    name: String
    networkName: String
    websiteUri: String
}

type Query {
    commentFeed(itemId: String!, orderBy: CommentOrderInput, skip: Int = 0, take: Int = 4): [Comment]
    ideaWithoutKeyword(skip: Int = 0, take: Int = 4): [Item]
    isVote(itemId: String!, walletAddress: String!): Vote
    isVotes(ids: [String], walletAddress: String!): [Vote]
    itemById(id: String!): Item
    itemFeed(itemType: String, orderBy: ItemOrderInput, query: String, skip: Int = 0, take: Int = 4): [Item]
    itemTypeCount: [ItemType]
    newsFeed(orderBy: ItemOrderInput, query: String, skip: Int = 0, take: Int = 4): [News]
    suggestUserFeed(skip: Int = 0, take: Int = 4): [SuggestUser]
    tweetById(id: String!): Tweet
    tweetFeed(day: Int = 1, lang: String = "all", orderBy: TweetOrderInput, query: String, skip: Int = 0, take: Int = 4): [Tweet]
    tweetWithoutKeyword(skip: Int = 0, take: Int = 4): [Tweet]
    tweetWithoutUser(skip: Int = 0, take: Int = 4): [Tweet]
}

type SuggestUser {
    description: String
    facebook: String
    id: String
    image: String
    keywords: String
    name: String
    twitter: String
    website: String
}

type ToggleVote {
    isVoted: Boolean
    totalVote: Int
}

type Token {
    id: String!
    name: String
    price: Float
    symbol: String
}

type Tweet {
    createdAt: DateTime!
    favoriteCount: Int!
    id: String!
    item: Item
    keywords: String
    lang: String
    quoteCount: Int!
    replyCount: Int!
    retweetCount: Int!
    source: JSONObject!
    tweetUser: TweetUser
    tweetUserId: String
}

type TweetUser {
    id: String!
    source: JSONObject!
}

type User {
    id: String!
    walletAddress: String!
}

type Vote {
    cnt: Int!
    createdAt: DateTime!
    itemId: String!
    user: User
    userId: String!
}

enum SortOrder {
    asc
    desc
}

input CommentOrderInput {
    createdAt: SortOrder
}

input ImageItemInput {
    images: [String]
    videos: [String]
}

input ItemOrderInput {
    createdAt: SortOrder
    totalComment: SortOrder
    totalVote: SortOrder
}

input TweetOrderInput {
    createdAt: SortOrder
    favoriteCount: SortOrder
    retweetCount: SortOrder
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject